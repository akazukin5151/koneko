#!/usr/bin/env bash

# lsix: like ls, but for images.
# Shows thumbnails of images with titles directly in terminal.

# Requirements: just ImageMagick and kitty

# Version 1.6.2
# B9 December 2018

# See end of file for USAGE.


# The following defaults may be overridden if autodetection succeeds.
foreground=black # Default text color.
#width=800	 # Default width of screen in pixels.

# Feel free to edit these defaults to your liking.
tilesize=500	       # Width and height of each tile in the montage.
tilewidth=$tilesize    # (or specify separately, if you prefer)
tileheight=$tilesize

fontfamily=Hiragino-Sans-GB-W3			# Wide coverage, comes with GNU/Linux

# Default font size is based on width of each tile in montage.
fontsize=$((tilewidth/10))

cleanup() {
    stty echo			# Reset terminal to show characters.
    exit 0
}
trap cleanup SIGINT SIGHUP SIGABRT EXIT

autodetect() {
    # Various terminal automatic configuration routines.

    # Don't show escape sequences the terminal doesn't understand.
    stty -echo			# Hush-a Mandara Ni Pari

    # Space on either side of each tile is less than 0.5% of total screen width
    tilexspace=0
    #$((width/201))
    tileyspace=0
    #$((tilexspace/2))
    # Figure out how many tiles we can fit per row. ("+ 1" is for -shadow).
    numtiles=8
    #$((width/(tilewidth + 2*tilexspace + 1)))
}

main() {
    # Discover and setup the terminal
    autodetect

    if [[ $# == 0 ]]; then
	# No command line args? Use a sorted list of image files in CWD.
	shopt -s nullglob nocaseglob nocasematch
	set - *{jpg,jpeg,png,gif,tiff,tif,p?m,x[pb]m,bmp,ico,svg,eps}
	[[ $# != 0 ]] || exit
	#readarray -t < <(printf "%s\n" "$@" | sort)

	# Only show first frame of animated GIFs if filename not specified.
	#for x in ${!MAPFILE[@]}; do
	#    if [[ ${MAPFILE[$x]} =~ gif$ ]]; then
	#	MAPFILE[$x]=":${MAPFILE[$x]}[0]"
	#    fi
	#done
	set - "${MAPFILE[@]}"
    fi

    imoptions="-tile ${numtiles}x1" # Each montage is 1 row x $numtiles columns
    imoptions+=" -geometry ${tilewidth}x${tileheight}>+${tilexspace}+${tileyspace}" # Size of each tile and spacing
    imoptions+=" -background none -fill $foreground" # Use terminal's colors
    imoptions+=" -auto-orient "	# Properly rotate JPEGs from cameras

    # See top of this file to change fontfamily and fontsize.
    imoptions+=" -font $fontfamily "
    imoptions+=" -pointsize $fontsize "

    # Create and display montages one row at a time.
    while [ $# -gt 0 ]; do
        # While we still have images to process...
        onerow=()
        goal=$(($# - numtiles)) # How many tiles left after this row
        while [ $# -gt 0  -a  $# -gt $goal ]; do
            len=${#onerow[@]}
            onerow[len++]="-label"
            onerow[len++]=$(processlabel "$1")
            onerow[len++]="$1"
            shift
        done
        montage "${onerow[@]}"  $imoptions gif:-  \
            | kitty +kitten icat
    done
}

processlabel() {
    # This routine is all about appeasing ImageMagick.
    # 1. Remove silly [0] suffix and : prefix.
    # 2. Quote percent backslash, and at sign.
    # 3. Replace control characters with question marks.
    # 4. If a filename is too long, remove extension (.jpg).
    # 5. Split long filenames with newlines (recursively)
    span=10			# filenames longer than span will be split
    echo -n "$1" |
	sed 's|^:||; s|\[0]$||;' | tr '[:cntrl:]' '?' |
	awk -v span=$span -v ORS=""  '
	function halve(s,      l,h) { 	# l and h are locals
	    l=length(s);  h=int(l/2);
	    if (l <= span) { return s; }
	    return halve(substr(s, 1, h))  "\n"  halve(substr(s, h+1));
	}
	{
	  if ( length($0) > span ) gsub(/\..?.?.?.?$/, "");
	  print halve($0);
        }
        ' |
	sed 's|%|%%|g; s|\\|\\\\|g; s|@|\\@|g;'
}

####

main "$@"

# Send an escape sequence and wait for a response from the terminal
# so that the program won't quit until images have finished transferring.
read -s -t 60 -d "c" -p $'\e[c' >&2


######################################################################
# NOTES:

# Usage: lsix [ FILES ... ]

# * FILES can be any image file that ImageMagick can handle.
#
# * If no FILES are specified the most common file extensions are tried.
#   (For now, lsix only searches the current working directory.)
#
# * Non-bitmap graphics often work fine (.svg, .eps, .pdf, .xcf).
#
# * Files containing multiple images (e.g., animated GIFs) will show
#   all the images if the filename is specified at the command line.
#   Only the first frame will be shown if "lsix" is called with no
#   arguments.
#
# * Because this uses escape sequences, it works seamlessly through ssh.
#
# * If your terminal supports reporting the background and foreground
#   color, lsix will use those for the montage background and text fill.
#
# * If your terminal supports changing the number of color registers
#   to improve the picture quality, lsix will do so.

# * Only software needed is ImageMagick (e.g., apt-get install imagemagick).


# * Be cautious using lsix on videos (lsix *.avi) as ImageMagick will
#   try to make a montage of every single frame and likely exhaust
#   your memory and/or your patience.

# BUGS

# * Directories are not handled nicely.
# * ImageMagick's Montage doesn't handle long filenames nicely.
# * Some transparent images (many .eps files) presume a white background
#   and will not show up if your terminal's background is black.
# * This file is getting awfully long for a one line kludge. :-)

# LICENSE INFORMATION
# (AKA, You know your kludge has gotten out of hand when...)

# Dual license:
# * You have all the freedoms permitted to you under the
#   GNU GPL >=3. (See the included LICENSE file).

# * Additionally, this program can be used under the terms of whatever
#   license 'xterm' is using (now or in the future). This is primarily
#   so that, if the xterm maintainer (currently Thomas E. Dickey) so
#   wishes, this program may be included with xterm as a Sixel test.
#   However, anyone who wishes to take advantage of this is free to do so.
